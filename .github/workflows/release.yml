name: Build and Release
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
permissions:
  contents: write
jobs:
  build-and-upload:
    name: Build and upload (${{ matrix.build }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y p7zip-full libx11-dev libxcb-shape0-dev
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install p7zip
          brew install libx11 || true # X11 может не понадобиться, но пробуем
      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build
        run: |
          cargo build --verbose --release --target ${{ matrix.target }} || exit 1
          ls -la target/${{ matrix.target }}/release/ || echo "Release directory not found"
      - name: Build archive
        shell: bash
        run: |
          binary_name="clipboard-inverter"
          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir -p "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ls -la target/${{ matrix.target }}/release/ || echo "Windows release directory not found"
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname/" || { echo "Failed to move Windows binary"; exit 1; }
            7z a "$dirname.zip" "$dirname/" || { echo "Failed to zip Windows archive"; exit 1; }
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            ls -la target/${{ matrix.target }}/release/ || echo "Non-Windows release directory not found"
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname/" || { echo "Failed to move binary"; exit 1; }
            tar -czf "$dirname.tar.gz" "$dirname/" || { echo "Failed to tar archive"; exit 1; }
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ASSET }}
